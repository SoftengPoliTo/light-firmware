name: code-quality

on: [push, pull_request]

jobs:

################################ STEP 1: Code Quality ################################
  code-quality-analysis:
      runs-on: ubuntu-latest
      env:
          RCA_LINK: https://github.com/mozilla/rust-code-analysis/releases/download
          RCA_VERSION: v0.0.25

      steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y bc jq

      - name: Install rust-code-analysis on Ubuntu
        run: |
          mkdir -p $HOME/.local/bin	
          curl -L "$RCA_LINK/$RCA_VERSION/rust-code-analysis-linux-cli-x86_64.tar.gz" |
          tar xz -C $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run rust-code-analysis
        run: |
          mkdir $HOME/rca-json
          rust-code-analysis-cli --metrics -O json --pr -o "$HOME/rca-json" -p $PWD

      - name: Evaluate code quality
        run: .github/scripts/main.sh

      - name: Prepare Step 1 artifacts
        run: |
          mkdir -p $HOME/final-artifacts/step1
          cp -r $HOME/rca-json/* $HOME/final-artifacts/step1/ || echo "No RCA JSON files to copy"
          cp -r $HOME/code-quality-report/* $HOME/final-artifacts/step1/ || echo "No code quality report files to copy"

      - name: Save code-quality artifacts temporarily
        uses: actions/upload-artifact@v4
        with:
          name: partial-artifacts
          path: ~/final-artifacts/

################################ STEP 2: Anomaly Detection ################################
  anomaly-detection:
    runs-on: ubuntu-latest
    needs: code-quality-analysis

    steps:
    - uses: actions/checkout@v4

    - name: Download partial artifacts
      uses: actions/download-artifact@v4
      with:
        name: partial-artifacts
        path: ~/final-artifacts/

    - name: Simulated anomaly detection step
      run: |
        mkdir -p $HOME/final-artifacts/step2
        echo "Anomaly Detection Report" > $HOME/final-artifacts/step2/anomaly-detection-report.txt

    - name: Save step1+step2 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: partial-artifacts
        path: ~/final-artifacts/
        overwrite: true

################################ STEP 3: Manifest-Producer Analysis ################################
  manifest-producer:
    runs-on: ubuntu-latest
    needs: anomaly-detection

    steps:
      - uses: actions/checkout@v4

      - name: Download partial artifacts
        uses: actions/download-artifact@v4
        with:
          name: partial-artifacts
          path: ~/final-artifacts/

      - name: Install musl
        run: | 
          sudo apt update
          sudo apt install -y musl-dev musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-unknown-linux-musl

      - name: Build firmware statically with musl
        run: |
          mkdir -p $HOME/final-artifacts/step3
          cargo build --release --target=x86_64-unknown-linux-musl
          cp target/x86_64-unknown-linux-musl/release/light-firmware $HOME/elf_binary

      - name: Clone manifest-producer repository
        run: |
          cd $HOME
          git clone https://github.com/SoftengPoliTo/manifest-producer.git
          cd manifest-producer

      - name: Run manifest producer
        run: |
          cd $HOME/manifest-producer
          cargo run $HOME/work/light-firmware/light-firmware/target/x86_64-unknown-linux-musl/release/light-firmware || echo "Failed to run manifest-producer, skipping step3 analysis"
          cp -r ./examples/results/light-firmware/* ../final-artifacts/step3/ 2>/dev/null || echo "No light-firmware found, skipping copy"
          cp ./examples/results/light-firmware_checker.json ../final-artifacts/step3/ 2>/dev/null || echo "No light-firmware.json found, skipping copy"

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results
          path: ~/final-artifacts/