#!/usr/bin/env python3
import json
import sys
from pathlib import Path
from datetime import datetime

def check_code_quality():
    """Check code quality results focusing on 'Overall Quality' metric."""
    home_dir = Path.home()
    report_file = home_dir / "final-artifacts" / "step1" / "report.txt"

    if not report_file.exists():
        return "üî¥", "Code quality report not found"
    
    try:
        with open(report_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        green = yellow = red = 0
        for line in lines:
            if "Overall Quality" in line:
                if "üü¢" in line:
                    green += 1
                elif "üü°" in line:
                    yellow += 1
                elif "üî¥" in line:
                    red += 1

        total = green + yellow + red
        if total == 0:
            return "üî¥", "No quality metrics found in report"
            ""
        if red/total > total/2:
            return "üî¥", f"Critical issues in code quality ({red}/{total} functions)"
        elif yellow/total > total/3:
            return "üü°", f"Warnings in code quality ({yellow}/{total} functions)"
        else:
            return "üü¢", f"All functions passed ({green}/{total} functions)"

    except Exception as e:
         return "üî¥", f"Error parsing code quality report: {str(e)}"

    
def generate_final_report():
    """Generate final markdown report with semaphores for all sections"""

    print("üîç Analyzing results from all steps...")

    code_quality_status, code_quality_msg = check_code_quality()

    print(f"üìä Code Quality: {code_quality_status} - {code_quality_msg}")

    # Generate final report
    home_dir = Path.home()
    final_report_path = home_dir / "final-artifacts" / "FINAL_REPORT.md"

    # Ensure directory exists
    final_report_path.parent.mkdir(parents=True, exist_ok=True)

    # Calculate overall project status
    all_statuses = [code_quality_status]
    if "üî¥" in all_statuses:
        overall_status = "üî¥"
        overall_message = "Critical issues found - Action required"
    elif "üü°" in all_statuses:
        overall_status = "üü°"
        overall_message = "Warnings found - Review recommended"
    else:
        overall_status = "üü¢"
        overall_message = "All checks passed successfully"

    # Generate markdown report
    report_content = f"""# Firmware Compliance Analysis Report
**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

## Overall Status: {overall_status}

**{overall_message}**

---

## Analysis Results Summary

| Section | Status | Message |
|---------|--------|---------|
| Code Quality | {code_quality_status} | {code_quality_msg} |

---

## Detailed Results

### 1. Code Quality Analysis {code_quality_status}
- **Status:** {code_quality_status}
- **Message:** {code_quality_msg}
- **Tool:** rust-code-analysis
- **Metrics analyzed:** LOC, Cyclomatic Complexity, Maintainability Index, Halstead Effort
- **Details:** Check `step1/` directory for detailed reports and JSON files

---

## Status Legend

- üü¢ **Good**: All checks passed successfully
- üü° **Warning**: Some issues found, review recommended
- üî¥ **Critical**: Issues found, action required

---

## Artifact Structure

```
final-artifacts/
‚îú‚îÄ‚îÄ step1/                              # Code quality analysis results
‚îÇ   ‚îú‚îÄ‚îÄ ~/*.json                        # rust-code-analysis output
‚îÇ   ‚îî‚îÄ‚îÄ report.txt                      # Quality evaluation report
‚îú‚îÄ‚îÄ step2/                              # Anomaly detection results
‚îÇ   ‚îî‚îÄ‚îÄ anomaly-detection-report.txt
‚îú‚îÄ‚îÄ step3/                              # Manifest-producer analysis results
‚îÇ   ‚îú‚îÄ‚îÄ light-firmware_checker.json     # Manifest checker results
‚îÇ   ‚îî‚îÄ‚îÄ [other manifest files]          # Additional manifest files
‚îî‚îÄ‚îÄ FINAL_REPORT.md                     # This report
```

---

## Recommendations

{generate_recommendations(overall_status, code_quality_status)}

---

## Compliance Status

This firmware analysis {'**PASSES**' if overall_status == 'üü¢' else '**REQUIRES ATTENTION**'} compliance checks.

{f"‚úÖ The firmware meets all compliance standards and is ready for deployment." if overall_status == "üü¢" else ""}
{f"‚ö†Ô∏è The firmware has some warnings that should be reviewed before deployment." if overall_status == "üü°" else ""}
{f"üö® The firmware has critical issues that must be resolved before deployment." if overall_status == "üî¥" else ""}

---

*Report generated by Firmware Compliance Analysis Pipeline*
"""

    with open(final_report_path, 'w', encoding='utf-8') as f:
        f.write(report_content)

    print(f"üìÑ Final report generated: {final_report_path}")
    print(f"üö¶ Overall project status: {overall_status} - {overall_message}")

    # Return appropriate exit code
    return 0 if overall_status in ["üü¢", "üü°"] else 1


def generate_recommendations(code_quality_status):
    """Generate recommendations based on analysis results"""
    recommendations = []

    if code_quality_status == "üî¥":
        recommendations.append("- **Code Quality**: Refactor functions with high complexity or low maintainability")
    elif code_quality_status == "üü°":
        recommendations.append("- **Code Quality**: Consider reviewing functions with warnings")

    if not recommendations:
        recommendations.append("- **All systems**: Continue with standard deployment procedures")

    return "\n".join(recommendations)


def count_files_in_step(step_dir):
    """Count files in a step directory for summary"""
    if not step_dir.exists():
        return 0

    return len([f for f in step_dir.iterdir() if f.is_file()])

def main():
    """Main Function to run the final compliance report."""
    if len(sys.argv) > 1:
        print("Usage: python final_report.py")
        print("This script analyses all step results and generates a final compliance report.")
        sys.exit(1)

    try:
        exit_code = generate_final_report()
        sys.exit(exit_code)
    except Exception as e:
        print(f"‚ùå Error generating final report: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()